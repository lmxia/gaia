/*
Copyright The Gaia Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/lmxia/gaia/pkg/apis/cluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HypernodeLister helps list Hypernodes.
// All objects returned here must be treated as read-only.
type HypernodeLister interface {
	// List lists all Hypernodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hypernode, err error)
	// Hypernodes returns an object that can list and get Hypernodes.
	Hypernodes(namespace string) HypernodeNamespaceLister
	HypernodeListerExpansion
}

// hypernodeLister implements the HypernodeLister interface.
type hypernodeLister struct {
	indexer cache.Indexer
}

// NewHypernodeLister returns a new HypernodeLister.
func NewHypernodeLister(indexer cache.Indexer) HypernodeLister {
	return &hypernodeLister{indexer: indexer}
}

// List lists all Hypernodes in the indexer.
func (s *hypernodeLister) List(selector labels.Selector) (ret []*v1alpha1.Hypernode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hypernode))
	})
	return ret, err
}

// Hypernodes returns an object that can list and get Hypernodes.
func (s *hypernodeLister) Hypernodes(namespace string) HypernodeNamespaceLister {
	return hypernodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HypernodeNamespaceLister helps list and get Hypernodes.
// All objects returned here must be treated as read-only.
type HypernodeNamespaceLister interface {
	// List lists all Hypernodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hypernode, err error)
	// Get retrieves the Hypernode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Hypernode, error)
	HypernodeNamespaceListerExpansion
}

// hypernodeNamespaceLister implements the HypernodeNamespaceLister
// interface.
type hypernodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hypernodes in the indexer for a given namespace.
func (s hypernodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hypernode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hypernode))
	})
	return ret, err
}

// Get retrieves the Hypernode from the indexer for a given namespace and name.
func (s hypernodeNamespaceLister) Get(name string) (*v1alpha1.Hypernode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hypernode"), name)
	}
	return obj.(*v1alpha1.Hypernode), nil
}
